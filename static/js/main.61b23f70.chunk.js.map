{"version":3,"sources":["components/Preloader.js","DataHandling.js","components/CountyMap/County.js","components/CountyMap/CountyMap.js","components/Histogram/HistogramBar.js","components/Histogram/Axis.js","D3Blackbox.js","components/Histogram/Histogram.js","components/Meta/USStatesMap.js","components/Meta/Title.js","components/Meta/Description.js","components/MedianLine.js","components/Controls/Toggle.js","components/Controls/ControlRow.js","components/Controls/index.js","App.js","serviceWorker.js","index.js","assets/preloading.png"],"names":["Preloader","className","src","PreloaderImg","style","width","alt","cleanIncome","d","countyName","USstate","medianIncome","Number","lowerBound","upperBound","dateParse","d3","cleanSalary","employer","submit_date","start_date","case_status","job_title","clean_job_title","base_salary","city","county","countyID","cleanUSStateName","code","id","name","cleanCounty","ChoroplethColors","_","reverse","County","nextProps","nextState","this","props","zoom","value","geoPath","feature","quantize","color","fill","title","Component","CountyMap","projection","scale","state","range","usTopoJson","values","us","USstatesMesh","topojson","objects","states","a","b","counties","features","countyValueMap","fromPairs","map","key","stroke","strokeLineJoin","translate","height","USstatePaths","find","USstateNames","centroid","domain","React","HistogramBar","percent","x","y","label","toFixed","replace","transform","textAnchor","D3render","Axis","axis","tickFormat","ticks","data","length","anchorRef","current","call","createRef","ref","Histogram","histogram","widthScale","yScale","makeBar","bar","axisMargin","x1","x0","bars","thresholds","bins","counts","bottomMargin","Title","mean","format","d3mean","yearsFragment","USstateFragment","jobTitleFragment","stateFragment","year","filteredBy","USStatesMap","toUpperCase","jobTitle","scaleLinear","d3extent","Description","allData","filter","getFullYear","deviation","d3deviation","UStateFragment","previousYearFragment","countyFragment","fragment","lastYear","allDataForYear","allDataForJobTitle","allDataForUSstate","Math","abs","byCounty","groupBy","medians","medianIncomesByCounty","ordered","sortBy","keys","items","best","countyMedian","byCity","S","titleCase","s","jobFragment","yearFragment","target","href","MedianLine","median","line","medianValue","medianLabel","background","paddingLeft","Toggle","onClick","ControlRow","makePick","picked","newState","updateDataFilter","capitalize","toggleNames","_addToggle","Controls","yearFilter","jobTitleFilter","USstateFilter","updateYearFilter","reset","setState","reportUpdateUpTheChain","updateJobTitleFilter","updateUSstateFilter","window","location","hash","split","filters","join","years","Set","jobTitles","USstates","Array","from","App","techSalaries","salariesFilter","medianIncomes","countyNames","filteredTechSalaries","page","startData","e","setInterval","parseInt","callback","noop","Promise","all","then","medianIncomesMap","forEach","isNull","medianIncomesByUSState","loadAllData","i","prevState","techSalariesMap","medianHousehold","salaries","filteredSalaries","filteredSalariesMap","countyValues","countyValue","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"mVA0BeA,EAtBG,kBAClB,yBAAKC,UAAU,iBACX,yEACA,uBAAGA,UAAU,QAAb,8GAEqB,qEAFrB,oCAGyB,IACrB,6DACgC,2CADhC,sCAEsB,mEAFtB,6EAON,yBACGC,IAAKC,IACLC,MAAO,CAAEC,MAAO,QAChBC,IAAI,oBAEN,wBAAIL,UAAU,eAAd,sB,QCpBGM,EAAc,SAACC,GAAD,MAAQ,CACxBC,WAAYD,EAAC,KACbE,QAASF,EAAC,MACVG,aAAcC,OAAOJ,EAAE,4BACvBK,WAAYD,OAAOJ,EAAE,uBACrBM,WAAYF,OAAOJ,EAAE,yBAGnBO,EAAYC,IAAa,YAEzBC,EAAc,SAACT,GACjB,OAAKA,EAAE,gBAAkBI,OAAOJ,EAAE,gBAAkB,IACzC,KAGJ,CAACU,SAAUV,EAAEU,SAChBC,YAAaJ,EAAUP,EAAE,gBACzBY,WAAYL,EAAUP,EAAE,eACxBa,YAAab,EAAE,eACfc,UAAWd,EAAE,aACbe,gBAAiBf,EAAE,aACnBgB,YAAaZ,OAAOJ,EAAE,gBACtBiB,KAAMjB,EAAC,KACPE,QAASF,EAAC,MACVkB,OAAQlB,EAAC,OACTmB,SAAUnB,EAAC,WAIboB,EAAmB,SAACpB,GAAD,MAAQ,CAC7BqB,KAAMrB,EAAEqB,KACRC,GAAIlB,OAAOJ,EAAEsB,IACbC,KAAMvB,EAAEuB,OAGNC,EAAc,SAAAxB,GAAC,MAAK,CACtBsB,GAAIlB,OAAOJ,EAAEsB,IACbC,KAAMvB,EAAEuB,O,gBCrCNE,EAAmBC,IAAEC,QAAQ,CAC/B,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,gBACA,kBA4BWC,E,8LAvBWC,EAAWC,GAAY,IAAD,EAChBC,KAAKC,MAArBC,EADgC,EAChCA,KAAMC,EAD0B,EAC1BA,MAEd,OAAOD,IAASJ,EAAUI,MAAQC,IAAUL,EAAUK,Q,+BAGhD,IAAD,EACyCH,KAAKC,MAA3CE,EADH,EACGA,MAAOC,EADV,EACUA,QAASC,EADnB,EACmBA,QAASC,EAD5B,EAC4BA,SAE7BC,EAZO,mBAkBX,OAJIJ,IACAI,EAAQb,EAAiBY,EAASH,KAIlC,0BAAMlC,EAAGmC,EAAQC,GACbxC,MAAO,CAAE2C,KAAMD,GACfE,MAAOJ,EAAQd,S,GAnBVmB,a,kOCuFNC,E,YA/FX,WAAYV,GAAQ,IAAD,sBACf,4CAAMA,IAEN,IAAMW,EAAanC,MAAkBoC,MAAM,MAH5B,OAKf,EAAKC,MAAQ,CACTV,QAAS3B,MAAamC,WAAWA,GACjCN,SAAU7B,MAAmBsC,MAAMtC,IAAS,IAC5CmC,cARW,E,sEAiDT,IAAD,EACgCZ,KAAKC,MAAlCe,EADH,EACGA,WAAYC,EADf,EACeA,OAAQf,EADvB,EACuBA,KADvB,EAEuBF,KAAKc,MAA3BV,EAFD,EAECA,QAASE,EAFV,EAEUA,SAEf,GAAKU,EAEE,CACH,IAAME,EAAKF,EACPG,EAAeC,IACXF,EACAA,EAAGG,QAAQC,QACX,SAACC,EAAGC,GAAJ,OAAUD,IAAMC,KAEpBC,EAAWL,IAAiBF,EAAIA,EAAGG,QAAQI,UAAUC,SAEnDC,EAAiBhC,IAAEiC,UACrBX,EAAOY,KAAI,SAAA5D,GAAC,MAAI,CAACA,EAAEmB,SAAUnB,EAAEkC,WAGnC,OACI,2BACKsB,EAASI,KAAI,SAAAxB,GAAO,OACjB,kBAAC,EAAD,CACID,QAASA,EACTC,QAASA,EACTH,KAAMA,EACN4B,IAAKzB,EAAQd,GACbe,SAAUA,EACVH,MAAOwB,EAAetB,EAAQd,SAItC,0BACItB,EAAGmC,EAAQe,GACXtD,MAAO,CACH2C,KAAM,OACNuB,OAAQ,OACRC,eAAgB,YAhChC,OAAO,Q,gDA1CiB/B,EAAOa,GAAQ,IACrCF,EAAkCE,EAAlCF,WAAYN,EAAsBQ,EAAtBR,SAAUF,EAAYU,EAAZV,QAM5B,GAJAQ,EACKqB,UAAU,CAAChC,EAAMnC,MAAQ,EAAGmC,EAAMiC,OAAS,IAC3CrB,MAAoB,IAAdZ,EAAMnC,OAEbmC,EAAMC,MAAQD,EAAMe,WAAY,CAChC,IAAME,EAAKjB,EAAMe,WACbmB,EAAef,IAAiBF,EAAIA,EAAGG,QAAQC,QAAQI,SACvDnC,EAAKI,IAAEyC,KAAKnC,EAAMoC,aAAc,CAAE/C,KAAMW,EAAMC,OAAQX,GAE1DqB,EAAWC,MAAoB,IAAdZ,EAAMnC,OAEvB,IAAMwE,EAAWlC,EAAQkC,SAAS3C,IAAEyC,KAAKD,EAAc,CAAE5C,GAAIA,KACzD0C,EAAYrB,EAAWqB,YAE3BrB,EAAWqB,UAAU,CACjBA,EAAU,GAAKK,EAAS,GAAKrC,EAAMnC,MAAQ,EAC3CmE,EAAU,GAAKK,EAAS,GAAKrC,EAAMiC,OAAS,IAWpD,OAPIjC,EAAMgB,QACNX,EAASiC,OAAO,CACZ9D,IAAYwB,EAAMgB,OAAQ,KAAM,SAAAhD,GAAC,OAAIA,EAAEkC,SACvC1B,IAAYwB,EAAMgB,OAAQ,KAAM,SAAAhD,GAAC,OAAIA,EAAEkC,W,yVAIxC,CAAP,GACOW,EADP,CAEIF,aACAN,iB,GA9CYkC,IAAM9B,WC0Bf+B,G,OA/BM,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,EAAGC,EAAuB,EAAvBA,EAAG9E,EAAoB,EAApBA,MAAOoE,EAAa,EAAbA,OACxCD,EAAS,oBAAgBU,EAAhB,aAAsBC,EAAtB,KACTC,EAAQH,EAAQI,QAAQ,GAAK,IAcjC,OAZIJ,EAAU,IACVG,EAAQH,EAAQI,QAAQ,GAAK,KAG7BhF,EAAQ,KACR+E,EAAQA,EAAME,QAAQ,IAAK,KAG3BjF,EAAQ,KACR+E,EAAQ,IAIR,uBAAGG,UAAWf,EAAWvE,UAAU,OAC/B,0BACII,MAAOA,EACPoE,OAAQA,EAAS,EACjBc,UAAU,oBAEd,0BAAMC,WAAW,MAAMN,EAAG7E,EAAQ,EAAG8E,EAAGV,EAAS,EAAI,GAChDW,MCvBf,ICDmCK,EDWpBC,GCXoBD,EDCX,WACpB,IAAME,EAAO3E,MAER4E,YAAW,SAAApF,GAAC,gBAAOQ,IAAU,MAAVA,CAAiBR,OACpC4C,MAAMb,KAAKC,MAAMY,OACjByC,MAAMtD,KAAKC,MAAMsD,KAAKC,QAE3B/E,IAAUuB,KAAKyD,UAAUC,SAASC,KAAKP,ICPvC,2MACIK,UAAYjB,IAAMoB,YADtB,mFAIQV,EAASS,KAAK3D,QAJtB,2CAOQkD,EAASS,KAAK3D,QAPtB,+BAUc,IAAD,EACYA,KAAKC,MAAd0C,EADH,EACGA,EAAGC,EADN,EACMA,EACX,OACI,uBAAGI,UAAS,oBAAeL,EAAf,aAAqBC,EAArB,KAA2BiB,IAAK7D,KAAKyD,gBAb7D,GAA8BjB,IAAM9B,Y,kOCwEzBoD,E,2MAnEbhD,MAAQ,CACNiD,UAAWtF,MACXuF,WAAYvF,MACZwF,OAAQxF,O,EA2BZyF,QAAU,SAAAC,GAAQ,IAAD,EACkB,EAAKrD,MAA5BmD,EADK,EACLA,OAAQD,EADH,EACGA,WAGZ/D,EAAQ,CACRyC,QAHWyB,EAAIX,OAAS,EAAKvD,MAAMsD,KAAKC,OAAU,IAIlDb,EAAG,EAAK1C,MAAMmE,WACdxB,EAAGqB,EAAOE,EAAIE,IACdvG,MAAOkG,EAAWG,EAAIX,QACtBtB,OAAQ+B,EAAOE,EAAIG,IAAML,EAAOE,EAAIE,IACpCvC,IAAK,iBAAmBqC,EAAIG,IAGhC,OAAO,kBAAC,EAAiBrE,I,wEAGnB,IAAD,EACyBD,KAAKc,MAA3BiD,EADH,EACGA,UAAWE,EADd,EACcA,OADd,EAE4BjE,KAAKC,MAAhC0C,EAFD,EAECA,EAAGC,EAFJ,EAEIA,EAAGW,EAFP,EAEOA,KAAMa,EAFb,EAEaA,WAEZG,EAAOR,EAAUR,GAEvB,OACI,uBAAG7F,UAAU,YAAYsF,UAAS,oBAAeL,EAAf,aAAqBC,EAArB,MAC9B,uBAAGlF,UAAU,QACZ6G,EAAK1C,IAAI7B,KAAKkE,UAEf,kBAAC,EAAD,CAAMvB,EAAGyB,EAAW,EAClBxB,EAAG,EACHW,KAAMgB,EACN1D,MAAOoD,Q,gDAtDWhE,EAAOa,GAAQ,IACrCiD,EAAkCjD,EAAlCiD,UAAWC,EAAuBlD,EAAvBkD,WAAYC,EAAWnD,EAAXmD,OAE7BF,EAAUS,WAAWvE,EAAMwE,MAAMtE,MAAMF,EAAME,OAE7C,IAAMoE,EAAOR,EAAU9D,EAAMsD,MACzBmB,EAASH,EAAK1C,KAAI,SAAA5D,GAAC,OAAIA,EAAEuF,UAU7B,OARAQ,EACKzB,OAAO,CAAC9D,IAAOiG,GAASjG,IAAOiG,KAC/B3D,MAAM,CAAC,EAAGd,EAAMnC,MAAQmC,EAAMmE,aAEnCH,EACK1B,OAAO,CAAC,EAAG9D,IAAO8F,GAAM,SAAAtG,GAAC,OAAIA,EAAEoG,QAC/BtD,MAAM,CAACd,EAAMiC,OAASjC,EAAM2C,EAAI3C,EAAM0E,aAAc,I,yVAElD,IACA7D,EADP,CAEIiD,YACAC,aACAC,e,GA7BgBzB,IAAM9B,W,eCJf,GACX,GAAM,UACN,GAAM,SACN,GAAM,iBACN,GAAM,UACN,GAAM,WACN,GAAM,aACN,GAAM,WACN,GAAM,cACN,GAAM,WACN,GAAM,uBACN,GAAM,iCACN,GAAM,UACN,GAAM,UACN,GAAM,OACN,GAAM,SACN,GAAM,QACN,GAAM,WACN,GAAM,UACN,GAAM,OACN,GAAM,SACN,GAAM,WACN,GAAM,YACN,GAAM,QACN,GAAM,mBACN,GAAM,WACN,GAAM,gBACN,GAAM,WACN,GAAM,YACN,GAAM,cACN,GAAM,WACN,GAAM,UACN,GAAM,WACN,GAAM,SACN,GAAM,gBACN,GAAM,aACN,GAAM,aACN,GAAM,WACN,GAAM,iBACN,GAAM,eACN,GAAM,2BACN,GAAM,OACN,GAAM,WACN,GAAM,SACN,GAAM,QACN,GAAM,eACN,GAAM,cACN,GAAM,eACN,GAAM,iBACN,GAAM,eACN,GAAM,YACN,GAAM,QACN,GAAM,OACN,GAAM,UACN,GAAM,iBACN,GAAM,WACN,GAAM,aACN,GAAM,gBACN,GAAM,YACN,GAAM,WCYKkE,E,iLAxBT,IAAMC,EAAO7E,KAAK8E,OAAOC,YAAO/E,KAAKC,MAAMsD,MAAM,SAAAtF,GAAC,OAAIA,EAAEgB,gBAoBxD,OAjBIe,KAAKgF,eAAiBhF,KAAKiF,gBAEvB,kCACQjF,KAAKiF,gBADb,KACgCjF,KAAKkF,iBADrC,IAEML,EAFN,SAEkB7E,KAAKgF,eAKvB,4BACKhF,KAAKkF,iBADV,KAC8BL,EAD9B,QAEK7E,KAAKiF,gBAAL,aAA6BjF,KAAKmF,eAAkB,GACpDnF,KAAKgF,iB,oCAvDhB,IAAMI,EAAOpF,KAAKC,MAAMoF,WAAWD,KAEnC,MAAgB,MAATA,EAAe,GAAf,aAA0BA,K,sCAIjC,IAAMjH,EAAU6B,KAAKC,MAAMoF,WAAWlH,QAEtC,MAAmB,MAAZA,EAAkB,GAAKmH,EAAYnH,EAAQoH,iB,uCAI9B,IAAD,EACQvF,KAAKC,MAAMoF,WAA9BG,EADW,EACXA,SAAUJ,EADC,EACDA,KACd3E,EAAQ,GAgBZ,MAfiB,MAAb+E,EAEI/E,EADS,MAAT2E,EACQ,+BAEA,6BAGZ3E,EAAK,mBAAe+E,EAAf,eAED/E,GADS,MAAT2E,EACS,QAEA,SAIV3E,I,6BAIP,OAAOgF,cACGlD,OAAOmD,YAAS1F,KAAKC,MAAMsD,MAAM,SAAAtF,GAAC,OAAIA,EAAEgB,gBACxCoE,iB,GAtCE3C,a,iBC2KLiF,E,uLApKIP,GAAkC,IAA5B7B,EAA2B,uDAApBvD,KAAKC,MAAM2F,QACnC,OAAOrC,EAAKsC,QAAO,SAAA5H,GAAC,OAAIA,EAAEW,YAAYkH,gBAAkBV,O,yCAGzCI,GAAsC,IAA5BjC,EAA2B,uDAApBvD,KAAKC,MAAM2F,QAC3C,OAAOrC,EAAKsC,QAAO,SAAA5H,GAAC,OAAIA,EAAEe,kBAAoBwG,O,wCAGhCrH,GAAqC,IAA5BoF,EAA2B,uDAApBvD,KAAKC,MAAM2F,QACzC,OAAOrC,EAAKsC,QAAO,SAAA5H,GAAC,OAAIA,EAAEE,UAAYA,O,+BAqItC,IAAM2G,EAAS9E,KAAK8E,OAChBD,EAAOE,YAAO/E,KAAKC,MAAMsD,MAAM,SAAAtF,GAAC,OAAIA,EAAEgB,eACtC8G,EAAYC,YAAYhG,KAAKC,MAAMsD,MAAM,SAAAtF,GAAC,OAAIA,EAAEgB,eAEpD,OACI,uBAAGvB,UAAU,QACRsC,KAAKgF,cAAgBhF,KAAKgF,cAAgB,aAD/C,OACiE,IAC5DhF,KAAKiG,eAFV,iBAEwC,IACnCjG,KAAKgF,cAAgB,YAAc,gBAAiB,IACrD,2BACKF,EAAO9E,KAAKC,MAAMsD,KAAKC,QAD5B,IACsCxD,KAAKkF,kBAE1ClF,KAAKkG,qBAPV,sBAOmD,IAC/C,+BACMpB,EAAOD,EAAOkB,GADpB,QACqCjB,EAAOD,EAAOkB,IAC9C,IAVT,aAWe/F,KAAKmG,kB,oCAjJxB,IAAMf,EAAOpF,KAAKC,MAAMoF,WAAWD,KAEnC,MAAgB,MAATA,EAAe,GAAf,aAA0BA,K,sCAIjC,IAAMjH,EAAU6B,KAAKC,MAAMoF,WAAWlH,QAEtC,MAAmB,MAAZA,EAAkB,GAAKmH,EAAYnH,EAAQoH,iB,2CAIlD,IAEIa,EAFEhB,EAAOpF,KAAKC,MAAMoF,WAAWD,KAInC,GAAa,MAATA,EACAgB,EAAW,QACR,GAAa,OAAThB,EACPgB,EAAW,OACR,CAAC,IAAD,EAC2BpG,KAAKC,MAAMoF,WAAjClH,EADL,EACKA,QAASqH,EADd,EACcA,SACba,EAAWrG,KAAKsG,eAAelB,EAAO,GAU1C,GARiB,MAAbI,IACAa,EAAWrG,KAAKuG,mBAAmBf,EAAUa,IAGjC,MAAZlI,IACAkI,EAAWrG,KAAKwG,kBAAkBrI,EAASkI,IAG3CrG,KAAKC,MAAMsD,KAAKC,OAAS6C,EAAS7C,OAAS,EAC3C4C,EACI,MACCpG,KAAKC,MAAMsD,KAAKC,OAAS6C,EAAS7C,QAAQV,UAC3C,uCACD,CACH,IAAMJ,GAEF,KADC,EAAI2D,EAAS7C,OAASxD,KAAKC,MAAMsD,KAAKC,SAEzCV,UAEFsD,EACI,KACAK,KAAKC,IAAIhE,GACT,MACCA,EAAU,EAAI,OAAS,QACxB,yBAIZ,OAAO0D,I,uCAIP,IAAMZ,EAAWxF,KAAKC,MAAMoF,WAAWG,SAavC,MAViB,MAAbA,EACW,iBAEM,UAAbA,EACW,iBAEH,sCAAkCA,EAAlC,O,qCAOE,IAAD,OACXmB,EAAWhH,IAAEiH,QAAQ5G,KAAKC,MAAMsD,KAAM,YACxCsD,EAAU7G,KAAKC,MAAM6G,sBAErBC,EAAUpH,IAAEqH,OACZrH,IAAEsH,KAAKN,GACF9E,KAAI,SAAA1C,GAAM,OAAIwH,EAASxH,MACvB0G,QAAO,SAAA5H,GAAC,OAAIA,EAAEuF,OAAS,EAAKvD,MAAMsD,KAAKC,OAAS,QACrD,SAAA0D,GAAK,OACDnC,YAAOmC,GAAO,SAAAjJ,GAAC,OAAIA,EAAEgB,eACrB4H,EAAQK,EAAM,GAAG9H,UAAU,GAAGhB,gBAGlC+I,EAAOJ,EAAQA,EAAQvD,OAAS,GAChC4D,EAAeP,EAAQM,EAAK,GAAG/H,UAAU,GAAGhB,aAE1CiJ,EAAS1H,IAAEiH,QAAQO,EAAM,QAE/BJ,EAAUpH,IAAEqH,OACRrH,IAAEsH,KAAKI,GACFxF,KAAI,SAAA3C,GAAI,OAAImI,EAAOnI,MACnB2G,QAAO,SAAA5H,GAAC,OAAIA,EAAEuF,OAAS2D,EAAK3D,OAAS,QAC1C,SAAA0D,GAAK,OAAInC,YAAOmC,GAAO,SAAAjJ,GAAC,OAAIA,EAAEgB,eAAemI,KAGjDD,EAAOJ,EAAQA,EAAQvD,OAAS,GAEhC,IAAMtE,EAAOoI,IAAEH,EAAK,GAAGjI,MAAMqI,YAAYC,EAA5B,YAAqCL,EAAK,GAAGhJ,SACtD0G,EAAOE,YAAOoC,GAAM,SAAAlJ,GAAC,OAAIA,EAAEgB,eAEzBwI,EAAczH,KAAKkF,iBACpBnC,QAAQ,qBAAsB,IAC9BA,QAAQ,iBAAkB,IAE/B,OACI,8CACkB,IACb0E,EAAYjE,OAAZ,cACYiE,EADZ,cAEK,aAAc,IACnBzH,KAAK0H,aAAe,MAAQ,KALjC,IAKuC,2BAAIxI,GAL3C,4BAMac,KAAK8E,OAAOD,EAAOuC,GANhC,4GAQ+B,IAC3B,uBAAGO,OAAO,SAASC,KAAK,kDAAxB,OATJ,O,6BAgBJ,OAAOnC,cACFlD,OAAOmD,YAAS1F,KAAKC,MAAMsD,MAAM,SAAAtF,GAAC,OAAIA,EAAEgB,gBACxCoE,iB,GA3Iab,IAAM9B,WC0BjBmH,EApCI,SAAC,GASb,IARLtE,EAQI,EARJA,KACApD,EAOI,EAPJA,MACArC,EAMI,EANJA,MACAoE,EAKI,EALJA,OACAS,EAII,EAJJA,EACAC,EAGI,EAHJA,EACA+B,EAEI,EAFJA,aACAmD,EACI,EADJA,OAEM7D,EAASxF,MAER8D,OAAO,CAAC,EAAG9D,IAAO8E,EAAMpD,KACxBY,MAAM,CAACmB,EAASU,EAAI+B,EAAc,IACvCoD,EAAOtJ,MAAU,CAAC,CAAC,EAAG,GAAI,CAACX,EAAO,KAEhCkK,EAAcF,GAAUrJ,IAAU8E,EAAMpD,GAExC8B,EAAS,oBAAgBU,EAAhB,aAAsBsB,EAAO+D,GAA7B,KACXC,EAAW,6BAAyBhE,EAAOZ,YAAPY,CAAoB6D,IAE5D,OACI,uBAAGpK,UAAU,OAAOsF,UAAWf,GAC3B,0BACIU,EAAG7E,EAAQ,EACX8E,EAAE,IACFK,WAAW,MACXpF,MAAO,CAAEqK,WAAY,WAEpBD,GAEL,0BAAMpK,MAAO,CAACsK,YAAY,QAASlK,EAAG8J,MCjB7BK,EAbF,SAAC,GAAqC,IAAnCvF,EAAkC,EAAlCA,MAAOrD,EAA2B,EAA3BA,KAAMW,EAAqB,EAArBA,MAAOkI,EAAc,EAAdA,QAChC3K,EAAY,kBAMhB,OALIyC,IACAzC,GAAa,gBAKb,4BAAQA,UAAWA,EAAW2K,QAAS,kBAAMA,EAAQ7I,GAAOW,KACzD0C,IC2BMyF,E,2MAnCXC,SAAW,SAACC,EAAQC,GAChB,EAAKxI,MAAMyI,iBAAiBF,GAASC,I,0EAG9BjJ,GACP,IAAIsC,EAAG,iBAAatC,GAChBqD,EAAQrD,EAMZ,OAJIQ,KAAKC,MAAM0I,aACX9F,EAAQA,EAAM0C,eAId,kBAAC,EAAD,CACI1C,MAAOA,EACPrD,KAAMA,EACNsC,IAAKA,EACL3B,MAAOH,KAAKC,MAAMuI,SAAWhJ,EAC7B6I,QAASrI,KAAKuI,a,+BAKhB,IAAD,OACGK,EAAgB5I,KAAKC,MAArB2I,YAER,OACI,yBAAKlL,UAAU,OACX,yBAAKA,UAAU,aACVkL,EAAY/G,KAAI,SAAArC,GAAI,OAAI,EAAKqJ,WAAWrJ,Y,GA9BpCgD,IAAM9B,WCwIhBoI,E,2MAvIXhI,MAAQ,CACJiI,WAAY,kBAAM,GAClBC,eAAgB,kBAAM,GACtBC,cAAe,kBAAM,GACrB7D,KAAM,IACNI,SAAU,IACVrH,QAAS,K,EAqBb+K,iBAAmB,SAAC9D,EAAM+D,GAEtB,IAAItD,EAAS,SAAA5H,GAAC,OAAIA,EAAEW,YAAYkH,gBAAkBV,IAE9C+D,GAAU/D,IACVS,EAAS,kBAAM,GACfT,EAAO,KAGX,EAAKgE,SACD,CACIL,WAAYlD,EACZT,KAAMA,IAEV,kBAAM,EAAKiE,6B,EAInBC,qBAAuB,SAAC7I,EAAO0I,GAC3B,IAAItD,EAAS,SAAA5H,GAAC,OAAIA,EAAEe,kBAAoByB,IAEpC0I,GAAU1I,IACVoF,EAAS,kBAAM,GACfpF,EAAQ,KAGZ,EAAK2I,SACD,CACIJ,eAAgBnD,EAChBL,SAAU/E,IAEd,kBAAM,EAAK4I,6B,EAInBE,oBAAsB,SAACpL,EAASgL,GAC5B,IAAItD,EAAS,SAAA5H,GAAC,OAAIA,EAAEE,UAAYA,IAE5BgL,GAAUhL,IACV0H,EAAS,kBAAM,GACf1H,EAAU,KAGd,EAAKiL,SACD,CACIH,cAAepD,EACf1H,QAASA,IAEb,kBAAM,EAAKkL,6B,mFAlEE,IAAD,EACgBG,OAAOC,SAASC,KAC3C3G,QAAQ,IAAK,IACb4G,MAAM,KAHK,mBACXvE,EADW,KACLjH,EADK,KACIqH,EADJ,KAKH,MAATJ,GAAgBA,GAChBpF,KAAKkJ,iBAAiB7K,OAAO+G,IAGjB,MAAZjH,GAAmBA,GACnB6B,KAAKuJ,oBAAoBpL,GAGZ,MAAbqH,GAAoBA,GACpBxF,KAAKsJ,qBAAqB9D,K,+CAgEzB,IAAAoE,EAPPJ,OAAOC,SAASC,KAAO,CAClB1J,KAAKc,MAAMsE,MAAQ,IACnBpF,KAAKc,MAAM3C,SAAW,IACtB6B,KAAKc,MAAM0E,UAAY,KACzBqE,KAAK,KAEN7J,KAAKC,MAAMyI,kBACNkB,EAKM5J,KAAKc,MAJD,SAAA7C,GAAC,OACJ2L,EAAQb,WAAW9K,IACnB2L,EAAQZ,eAAe/K,IACvB2L,EAAQX,cAAchL,KAE9B,CACImH,KAAMpF,KAAKc,MAAMsE,KACjBI,SAAUxF,KAAKc,MAAM0E,SACrBrH,QAAS6B,KAAKc,MAAM3C,Y,+BAKtB,IACEoF,EAASvD,KAAKC,MAAdsD,KAEFuG,EAAQ,IAAIC,IAAIxG,EAAK1B,KAAI,SAAA5D,GAAC,OAAIA,EAAEW,YAAYkH,kBAC9CkE,EAAY,IAAID,IAAIxG,EAAK1B,KAAI,SAAA5D,GAAC,OAAIA,EAAEe,oBACpCiL,EAAW,IAAIF,IAAIxG,EAAK1B,KAAI,SAAA5D,GAAC,OAAIA,EAAEE,YAEvC,OACI,6BACI,kBAAC,EAAD,CACIoF,KAAMA,EACNqF,YAAasB,MAAMC,KAAKL,EAAM7I,UAC9BuH,OAAQxI,KAAKc,MAAMsE,KACnBsD,iBAAkB1I,KAAKkJ,mBAE3B,kBAAC,EAAD,CACI3F,KAAMA,EACNqF,YAAasB,MAAMC,KAAKH,EAAU/I,UAClCuH,OAAQxI,KAAKc,MAAM0E,SACnBkD,iBAAkB1I,KAAKsJ,uBAG3B,kBAAC,EAAD,CACI/F,KAAMA,EACNqF,YAAasB,MAAMC,KAAKF,EAAShJ,UACjCuH,OAAQxI,KAAKc,MAAM3C,QACnBuK,iBAAkB1I,KAAKuJ,oBACvBZ,YAAU,S,GAjIPnG,IAAM9B,WC4Jd0J,E,2MA/IXtJ,MAAQ,CACJuJ,aAAc,GACdC,eAAgB,kBAAM,GACtBC,cAAe,GACfC,YAAa,GACbC,qBAAqB,GACrBC,KAAK,EACLrF,WAAY,CACVlH,QAAQ,IACRiH,KAAK,IACLI,SAAS,M,EAuCfmF,UAAY,SAAAC,GACG,EAAK9J,MAAb4J,KACLG,aAAY,kBAAM,EAAKzB,SAAS,CAACsB,KAAKI,SAAS,EAAKhK,MAAM4J,KAAM,OAAM,M,EAGxEhC,iBAAmB,SAAC7C,EAAQR,GACxB,EAAK+D,SAAS,CACVkB,eAAgBzE,EAChBR,WAAYA,K,mFA3CC,IAAD,QdcK,WAAwB,IAAvB0F,EAAsB,uDAAXpL,IAAEqL,KACzCC,QAAQC,IAAI,CACRzM,IAAQ,gBACRA,IAAO,sCACPgB,GAAchB,IAAO,iCACrBT,GAAcS,IAAO,0BACrBC,GACAD,IAAO,0BAA2BY,KACjC8L,MAAK,YAAqE,IAAD,mBAAlEjK,EAAkE,KAA9DsJ,EAA8D,KAAjDD,EAAiD,KAAlCF,EAAkC,KAAlBhI,EAAkB,KACxE+I,EAAmB,GACvBb,EAAc1E,QAAO,SAAA5H,GAAC,OAAI0B,IAAEyC,KAAKoI,EACA,CAAChL,KAChCvB,EAAC,gBACWoN,SAAQ,SAACpN,GACNA,EAAC,SAAe0B,IAAEyC,KAAKoI,EACxC,CAAChL,KACCvB,EAAC,aAAiBsB,GACH6L,EAAiBnN,EAAEmB,UAAYnB,KAEhDoM,EAAeA,EAAaxE,QAAO,SAAA5H,GAAC,OAAK0B,IAAE2L,OAAOrN,MAClD8M,EAAS,CACL/J,WAAYE,EACZsJ,YAAaA,EACbD,cAAea,EACftE,sBAAuBnH,IAAEiH,QAAQ2D,EAAc,cAC/CgB,uBAAwB5L,IAAEiH,QAAQ2D,EAAc,WAChDF,aAAcA,EAAchI,aAAcA,OcvC1CmJ,EAAY,SAAAjI,GACV,EAAK6F,SAAS7F,Q,+BAGXA,GACP,IAAK,IAAIkI,KAAMlI,EACTA,EAAKkI,GAAG,GAAR,U,yCAMWC,GACb1L,KAAKc,MAAMyK,uBAA2BG,EAAUH,yB,kCAK1CpM,EAAQwM,GAChB,IAAMC,EAAkB5L,KAAKc,MAAMyJ,cAAcpL,EAAOI,IACpDsM,EAAWF,EAAgBxM,EAAOK,MAEtC,IAAKoM,IAAoBC,EACrB,OAAO,KAGX,IAAM/D,EAASrJ,IAAUoN,GAAU,SAAA5N,GAAC,OAAIA,EAAEgB,eAE1C,MAAO,CACHG,SAAUD,EAAOI,GACjBY,MAAO2H,EAAS8D,EAAgBxN,gB,+BAiB9B,IAAD,SASD4B,KAAKc,MAPLuJ,EAFC,EAEDA,aACAG,EAHC,EAGDA,YACAxJ,EAJC,EAIDA,WACAqB,EALC,EAKDA,aAEAgD,GAPC,EAMDqF,KANC,EAODrF,YAPC,EAQDkG,uBAEJ,GAAIlB,EAAa7G,OAAS,EACtB,OAAO,kBAAC,EAAD,MAGX,IAAItD,EAAO,KACP0L,EAAkB5L,KAAKc,MAAMyK,uBAAX,GAAwC,GACrDnN,aAEkB,MAAvBiH,EAAWlH,UACX+B,EAAOF,KAAKc,MAAMuE,WAAWlH,QAC7ByN,EAAkBnN,IACduB,KAAKc,MAAMyK,uBAAuBrL,IAClC,SAAAjC,GAAC,OAAIA,EAAEG,iBAIf,IAAM0N,EAAmBzB,EAClBxE,OAAO7F,KAAKc,MAAMwJ,gBACrByB,EAAsBpM,IAAEiH,QAAQkF,EAAkB,YAClDE,EAAexB,EACV3I,KAAI,SAAA1C,GAAM,OAAI,EAAK8M,YAAY9M,EAAQ4M,MACvClG,QAAO,SAAA5H,GAAC,OAAK0B,IAAE2L,OAAOrN,MAE/B,OACI,yBAAKP,UAAU,iBACb,kBAAC,EAAD,CAAO6F,KAAMuI,EAAkBzG,WAAYA,IACzC,kBAAC,EAAD,CACI9B,KAAMuI,EACNlG,QAASyE,EACThF,WAAYA,EACZyB,sBAAuB9G,KAAKc,MAAMgG,wBAEtC,yBAAKhJ,MAAM,OAAOoE,OAAO,OACrB,kBAAC,EAAD,CACIlB,WAAYA,EACZqB,aAAcA,EACdpB,OAAQ+K,EACRrJ,EAAG,EACHC,EAAG,EACH9E,MAAO,IACPoE,OAAQ,IACRhC,KAAMA,IAEZ,0BAAMyC,EAAE,MAAMC,EAAE,IAAI9E,MAAM,MAAMoE,OAAO,MAAMrE,MAAO,CAAC2C,KAAK,WACxD,kBAAC,EAAD,CACEiE,KAAM,GACN3G,MAAO,IACPoE,OAAQ,IACRS,EAAG,IACHC,EAAG,GACHW,KAAMuI,EACN1H,WAAY,GACZO,aAAc,EACdxE,MAAO,SAAAlC,GAAC,OAAIA,EAAEgB,eAEd,kBAAC,EAAD,CAAYsE,KAAMuI,EAChBnJ,EAAG,IACHC,EAAG,GACH9E,MAAO,IACPoE,OAAQ,IACRyC,aAAc,EACdmD,OAAQ8D,EACRzL,MAAO,SAAAlC,GAAC,OAAIA,EAAEgB,gBAGtB,kBAAC,EAAD,CAAUsE,KAAM8G,EAAc3B,iBAAkB1I,KAAK0I,wB,GA1InDhI,aCHEwL,QACW,cAA7B1C,OAAOC,SAAS0C,UAEe,UAA7B3C,OAAOC,SAAS0C,UAEhB3C,OAAOC,SAAS0C,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.61b23f70.chunk.js","sourcesContent":["import React from \"react\";\nimport PreloaderImg from \"../assets/preloading.png\";\n\n\nconst Preloader = () => (\n<div className=\"App container\">\n    <h1>The average H1B in tech pays $86,164/year</h1>\n    <p className=\"lead\">\nSince 2012 the US tech industry has sponsored 􏰀→ 176,075 H1B work\nvisas. Most of them paid <b>$60,660 to 􏰀→ $111,668</b> per year (1\n        standard deviation).{\" \"}\n        <span>\n            The best city for an H1B is <b>Kirkland, WA</b> with an average\n            individual salary <b>$39,465 above local household median</b>.\n            Median household salary is a good proxy for cost of living in an\n            area.\n        </span>\n</p>\n  <img\n     src={PreloaderImg}\n     style={{ width: \"100%\" }}\n     alt=\"Loading preview\"\n   />\n   <h2 className=\"text-center\">Loading data ...</h2>\n  </div>\n  );\nexport default Preloader;\n","import * as d3 from 'd3';\nimport _ from 'lodash';\n\nconst cleanIncome = (d) => ({\n    countyName: d['Name'],\n    USstate: d['State'],\n    medianIncome: Number(d['Median Household Income']),\n    lowerBound: Number(d['90% CI Lower Bound']),\n    upperBound: Number(d['90% CI Upper Bound'])\n});\n\nconst dateParse = d3.timeParse(\"%m/%d/%Y\");\n\nconst cleanSalary = (d) => {\n    if (!d['base salary'] || Number(d['base salary']) > 300000) {\n        return null;\n    }\n\n    return {employer: d.employer,\n        submit_date: dateParse(d['submit date']),\n        start_date: dateParse(d['start date']),\n        case_status: d['case status'],\n        job_title: d['job title'],\n        clean_job_title: d['job title'],\n        base_salary: Number(d['base salary']),\n        city: d['city'],\n        USstate: d['state'],\n        county: d['county'],\n        countyID: d['countyID']\n    };\n}\n\nconst cleanUSStateName = (d) => ({\n    code: d.code,\n    id: Number(d.id),\n    name: d.name\n});\n\nconst cleanCounty = d => ({\n    id: Number(d.id),\n    name: d.name\n});\n\n\n  export const loadAllData = (callback = _.noop) => {\n  Promise.all([\n      d3.json(\"data/us.json\"),\n      d3.csv(\"data/us-county-names-normalized.csv\",\n      cleanCounty), d3.csv(\"data/county-median-incomes.csv\",\n      cleanIncome), d3.csv(\"data/2012-2016-h1bs.csv\",\n      cleanSalary),\n      d3.tsv(\"data/us-state-names.tsv\", cleanUSStateName)])\n      .then(([us, countyNames, medianIncomes, techSalaries,   USstateNames]) => {\n    let medianIncomesMap = {};\n    medianIncomes.filter(d => _.find(countyNames,\n                                     {name:\n      d['countyName']}))\n                 .forEach((d) => {\n                     d['countyID'] = _.find(countyNames,\n    {name:\n      d['countyName']}).id;\n                     medianIncomesMap[d.countyID] = d;\n                 });\n    techSalaries = techSalaries.filter(d => !_.isNull(d));\n    callback({\n        usTopoJson: us,\n        countyNames: countyNames,\n        medianIncomes: medianIncomesMap,\n        medianIncomesByCounty: _.groupBy(medianIncomes,'countyName'),\n        medianIncomesByUSState: _.groupBy(medianIncomes,'USstate'),\n        techSalaries: techSalaries, USstateNames: USstateNames\n    })\n  })\n      }\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\n\nconst ChoroplethColors = _.reverse([\n    \"rgb(247,251,255)\",\n    \"rgb(222,235,247)\",\n    \"rgb(198,219,239)\",\n    \"rgb(158,202,225)\",\n    \"rgb(107,174,214)\",\n    \"rgb(66,146,198)\",\n    \"rgb(33,113,181)\",\n    \"rgb(8,81,156)\",\n    \"rgb(8,48,107)\"\n]);\nconst BlankColor = \"rgb(240,240,240)\";\n\nclass County extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { zoom, value } = this.props;\n\n        return zoom !== nextProps.zoom || value !== nextProps.value;\n    }\n\n    render() {\n        const { value, geoPath, feature, quantize } = this.props;\n\n        let color = BlankColor;\n\n        if (value) {\n            color = ChoroplethColors[quantize(value)];\n        }\n\n        return (\n            <path d={geoPath(feature)}\n                style={{ fill: color }}\n                title={feature.id}\n            />\n        );\n    }\n}\nexport default County;\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport _ from \"lodash\";\n\nimport County from \"./County\";\n\nclass CountyMap extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const projection = d3.geoAlbersUsa().scale(1280);\n\n        this.state = {\n            geoPath: d3.geoPath().projection(projection),\n            quantize: d3.scaleQuantize().range(d3.range(9)),\n            projection\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        let { projection, quantize, geoPath } = state;\n\n        projection\n            .translate([props.width / 2, props.height / 2])\n            .scale(props.width * 1.3);\n\n        if (props.zoom && props.usTopoJson) {\n            const us = props.usTopoJson,\n                USstatePaths = topojson.feature(us, us.objects.states).features,\n                id = _.find(props.USstateNames, { code: props.zoom }).id;\n\n            projection.scale(props.width * 4.5);\n\n            const centroid = geoPath.centroid(_.find(USstatePaths, { id: id })),\n                translate = projection.translate();\n\n            projection.translate([\n                translate[0] - centroid[0] + props.width / 2,\n                translate[1] - centroid[1] + props.height / 2\n            ]);\n        }\n\n        if (props.values) {\n            quantize.domain([\n                d3.quantile(props.values, 0.15, d => d.value),\n                d3.quantile(props.values, 0.85, d => d.value)\n            ]);\n        }\n\n        return {\n            ...state,\n            projection,\n            quantize\n        };\n    }\n\n    render() {\n        const { usTopoJson, values, zoom } = this.props,\n            { geoPath, quantize } = this.state;\n\n        if (!usTopoJson) {\n            return null;\n        } else {\n            const us = usTopoJson,\n                USstatesMesh = topojson.mesh(\n                    us,\n                    us.objects.states,\n                    (a, b) => a !== b\n                ),\n                counties = topojson.feature(us, us.objects.counties).features;\n\n            const countyValueMap = _.fromPairs(\n                values.map(d => [d.countyID, d.value])\n            );\n\n            return (\n                <g>\n                    {counties.map(feature => (\n                        <County\n                            geoPath={geoPath}\n                            feature={feature}\n                            zoom={zoom}\n                            key={feature.id}\n                            quantize={quantize}\n                            value={countyValueMap[feature.id]}\n                        />\n                    ))}\n\n                    <path\n                        d={geoPath(USstatesMesh)}\n                        style={{\n                            fill: \"none\",\n                            stroke: \"#fff\",\n                            strokeLineJoin: \"round\"\n                        }}\n                    />\n                </g>\n            );\n        }\n    }\n}\n\nexport default CountyMap;\n","import React from 'react'\n\nconst HistogramBar = ({ percent, x, y, width, height }) => {\n  let translate = `translate(${x}, ${y})`,\n      label = percent.toFixed(0) + \"%\";\n\n  if (percent < 1) {\n      label = percent.toFixed(2) + \"%\";\n  }\n\n  if (width < 20) {\n      label = label.replace(\"%\", \"\");\n  }\n\n  if (width < 10) {\n      label = \"\";\n  }\n\n  return (\n      <g transform={translate} className=\"bar\">\n          <rect\n              width={width}\n              height={height - 2}\n              transform=\"translate(0, 1)\"\n          />\n          <text textAnchor=\"end\" x={width - 5} y={height / 2 + 3}>\n              {label}\n          </text>\n      </g>\n  );\n};\n\n\nexport default HistogramBar\n","import * as d3 from \"d3\";\nimport D3blackbox from \"../../D3Blackbox\";\n\nconst Axis = D3blackbox(function() {\n    const axis = d3\n        .axisLeft()\n        .tickFormat(d => `${d3.format(\".2s\")(d)}`)\n        .scale(this.props.scale)\n        .ticks(this.props.data.length);\n\n    d3.select(this.anchorRef.current).call(axis);\n});\n\nexport default Axis;\n","import React from \"react\";\n\nexport default function D3blackbox(D3render) {\n    return class Blackbox extends React.Component {\n        anchorRef = React.createRef();\n\n        componentDidMount() {\n            D3render.call(this);\n        }\n        componentDidUpdate() {\n            D3render.call(this);\n        }\n\n        render() {\n            const { x, y } = this.props;\n            return (\n                <g transform={`translate(${x}, ${y})`} ref={this.anchorRef} />\n            );\n        }\n    };\n}\n","import React from 'react'\nimport * as d3 from 'd3'\nimport HistogramBar from './HistogramBar'\nimport Axis from './Axis'\n\nclass Histogram extends React.Component {\n\n\n  state = {\n    histogram: d3.histogram(),\n    widthScale: d3.scaleLinear(),\n    yScale: d3.scaleLinear()\n  };\n\nstatic getDerivedStateFromProps(props, state) {\n    let { histogram, widthScale, yScale } = state;\n\n    histogram.thresholds(props.bins).value(props.value);\n\n    const bars = histogram(props.data),\n        counts = bars.map(d => d.length);\n\n    widthScale\n        .domain([d3.min(counts), d3.max(counts)])\n        .range([0, props.width - props.axisMargin]);\n\n    yScale\n        .domain([0, d3.max(bars, d => d.x1)])\n        .range([props.height - props.y - props.bottomMargin, 0]);\n\n    return {\n        ...state,\n        histogram,\n        widthScale,\n        yScale\n    };\n}\n\nmakeBar = bar => {\n    const { yScale, widthScale } = this.state;\n    let percent = (bar.length / this.props.data.length) * 100;\n\n    let props = {\n        percent: percent,\n        x: this.props.axisMargin,\n        y: yScale(bar.x1),\n        width: widthScale(bar.length),\n        height: yScale(bar.x0) - yScale(bar.x1),\n        key: \"histogram-bar-\" + bar.x0\n    };\n\n    return <HistogramBar {...props} />;\n}\n\nrender() {\n    const { histogram, yScale } = this.state,\n        { x, y, data, axisMargin } = this.props;\n\n    const bars = histogram(data);\n\n    return (\n        <g className=\"histogram\" transform={`translate(${x}, ${y})`}>\n            <g className=\"bars\">\n            {bars.map(this.makeBar)}\n            </g>\n            <Axis x={axisMargin-3}\n              y={0}\n              data={bars}\n              scale={yScale} />\n        </g>\n    );\n}\n\n}\n\nexport default Histogram\n","\nexport default {\n    \"AL\": \"Alabama\",\n    \"AK\": \"Alaska\",\n    \"AS\": \"American Samoa\",\n    \"AZ\": \"Arizona\",\n    \"AR\": \"Arkansas\",\n    \"CA\": \"California\",\n    \"CO\": \"Colorado\",\n    \"CT\": \"Connecticut\",\n    \"DE\": \"Delaware\",\n    \"DC\": \"District Of Columbia\",\n    \"FM\": \"Federated States Of Micronesia\",\n    \"FL\": \"Florida\",\n    \"GA\": \"Georgia\",\n    \"GU\": \"Guam\",\n    \"HI\": \"Hawaii\",\n    \"ID\": \"Idaho\",\n    \"IL\": \"Illinois\",\n    \"IN\": \"Indiana\",\n    \"IA\": \"Iowa\",\n    \"KS\": \"Kansas\",\n    \"KY\": \"Kentucky\",\n    \"LA\": \"Louisiana\",\n    \"ME\": \"Maine\",\n    \"MH\": \"Marshall Islands\",\n    \"MD\": \"Maryland\",\n    \"MA\": \"Massachusetts\",\n    \"MI\": \"Michigan\",\n    \"MN\": \"Minnesota\",\n    \"MS\": \"Mississippi\",\n    \"MO\": \"Missouri\",\n    \"MT\": \"Montana\",\n    \"NE\": \"Nebraska\",\n    \"NV\": \"Nevada\",\n    \"NH\": \"New Hampshire\",\n    \"NJ\": \"New Jersey\",\n    \"NM\": \"New Mexico\",\n    \"NY\": \"New York\",\n    \"NC\": \"North Carolina\",\n    \"ND\": \"North Dakota\",\n    \"MP\": \"Northern Mariana Islands\",\n    \"OH\": \"Ohio\",\n    \"OK\": \"Oklahoma\",\n    \"OR\": \"Oregon\",\n    \"PW\": \"Palau\",\n    \"PA\": \"Pennsylvania\",\n    \"PR\": \"Puerto Rico\",\n    \"RI\": \"Rhode Island\",\n    \"SC\": \"South Carolina\",\n    \"SD\": \"South Dakota\",\n    \"TN\": \"Tennessee\",\n    \"TX\": \"Texas\",\n    \"UT\": \"Utah\",\n    \"VT\": \"Vermont\",\n    \"VI\": \"Virgin Islands\",\n    \"VA\": \"Virginia\",\n    \"WA\": \"Washington\",\n    \"WV\": \"West Virginia\",\n    \"WI\": \"Wisconsin\",\n    \"WY\": \"Wyoming\"\n};\n","import React, { Component } from 'react';\nimport { scaleLinear } from 'd3-scale';\nimport { mean as d3mean, extent as d3extent } from 'd3-array';\n\nimport USStatesMap from './USStatesMap';\n\nclass Title extends Component {\n    get yearsFragment() {\n        const year = this.props.filteredBy.year;\n\n        return year === '*' ? \"\" : `in ${year}`;\n    }\n\n    get USstateFragment() {\n        const USstate = this.props.filteredBy.USstate;\n\n        return USstate === '*' ? \"\" : USStatesMap[USstate.toUpperCase()];\n    }\n\n\n    get jobTitleFragment() {\n        const { jobTitle, year } = this.props.filteredBy;\n        let title = \"\";\n        if (jobTitle === \"*\") {\n            if (year === \"*\") {\n                title = \"The average H1B in tech pays\";\n            } else {\n                title = \"The average tech H1B paid\";\n            }\n        } else {\n            title = `Software ${jobTitle}s on an H1B`;\n            if (year === \"*\") {\n                title += \" make\";\n            } else {\n                title += \" made\";\n            }\n        }\n\n        return title;\n    }\n\n    get format() {\n        return scaleLinear()\n                 .domain(d3extent(this.props.data, d => d.base_salary))\n                 .tickFormat()\n    }\n\n    render() {\n      const mean = this.format(d3mean(this.props.data, d => d.base_salary));\n      let title;\n\n      if (this.yearsFragment && this.USstateFragment) {\n          title = (\n              <h2>\n                  In {this.USstateFragment}, {this.jobTitleFragment}\n                  ${mean}/year {this.yearsFragment}\n              </h2>\n          );\n      }else{\n          title = (\n              <h2>\n                  {this.jobTitleFragment} ${mean}/year\n                  {this.USstateFragment ? `in ${this.stateFragment}` : ''}\n                  {this.yearsFragment}\n              </h2>\n          );\n      }\n\n      return title;\n  }\n}\n\nexport default Title\n","import React from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n    mean as d3mean,\n    extent as d3extent,\n    deviation as d3deviation\n} from \"d3-array\";\nimport _ from \"lodash\";\nimport S from \"string\";\n\nimport USStatesMap from \"./USStatesMap\";\n\nclass Description extends React.Component {\n    allDataForYear(year, data = this.props.allData) {\n        return data.filter(d => d.submit_date.getFullYear() === year);\n    }\n\n    allDataForJobTitle(jobTitle, data = this.props.allData) {\n        return data.filter(d => d.clean_job_title === jobTitle);\n    }\n\n    allDataForUSstate(USstate, data = this.props.allData) {\n        return data.filter(d => d.USstate === USstate);\n    }\n\n    get yearsFragment() {\n        const year = this.props.filteredBy.year;\n\n        return year === \"*\" ? \"\" : `In ${year}`;\n    }\n\n    get USstateFragment() {\n        const USstate = this.props.filteredBy.USstate;\n\n        return USstate === \"*\" ? \"\" : USStatesMap[USstate.toUpperCase()];\n    }\n\n    get previousYearFragment() {\n        const year = this.props.filteredBy.year;\n\n        let fragment;\n\n        if (year === \"*\") {\n            fragment = \"\";\n        } else if (year === 2012) {\n            fragment = \"\";\n        } else {\n            const { USstate, jobTitle } = this.props.filteredBy;\n            let lastYear = this.allDataForYear(year - 1);\n\n            if (jobTitle !== \"*\") {\n                lastYear = this.allDataForJobTitle(jobTitle, lastYear);\n            }\n\n            if (USstate !== \"*\") {\n                lastYear = this.allDataForUSstate(USstate, lastYear);\n            }\n\n            if (this.props.data.length / lastYear.length > 2) {\n                fragment =\n                    \", \" +\n                    (this.props.data.length / lastYear.length).toFixed() +\n                    \" times more than the year before\";\n            } else {\n                const percent = (\n                    (1 - lastYear.length / this.props.data.length) *\n                    100\n                ).toFixed();\n\n                fragment =\n                    \", \" +\n                    Math.abs(percent) +\n                    \"% \" +\n                    (percent > 0 ? \"more\" : \"less\") +\n                    \" than the year before\";\n            }\n        }\n\n        return fragment;\n    }\n\n    get jobTitleFragment() {\n        const jobTitle = this.props.filteredBy.jobTitle;\n        let fragment;\n\n        if (jobTitle === \"*\") {\n            fragment = \"H1B work visas\";\n        } else {\n            if (jobTitle === \"other\") {\n                fragment = \"H1B work visas\";\n            } else {\n                fragment = `H1B work visas for software ${jobTitle}s`;\n            }\n        }\n\n        return fragment;\n    }\n\n    get countyFragment() {\n        const byCounty = _.groupBy(this.props.data, \"countyID\"),\n            medians = this.props.medianIncomesByCounty;\n\n        let ordered = _.sortBy(\n            _.keys(byCounty)\n                .map(county => byCounty[county])\n                .filter(d => d.length / this.props.data.length > 0.01),\n            items =>\n                d3mean(items, d => d.base_salary) -\n                medians[items[0].countyID][0].medianIncome\n        );\n\n        let best = ordered[ordered.length - 1],\n            countyMedian = medians[best[0].countyID][0].medianIncome;\n\n        const byCity = _.groupBy(best, \"city\");\n\n        ordered = _.sortBy(\n            _.keys(byCity)\n                .map(city => byCity[city])\n                .filter(d => d.length / best.length > 0.01),\n            items => d3mean(items, d => d.base_salary) - countyMedian\n        );\n\n        best = ordered[ordered.length - 1];\n\n        const city = S(best[0].city).titleCase().s + `, ${best[0].USstate}`,\n            mean = d3mean(best, d => d.base_salary);\n\n        const jobFragment = this.jobTitleFragment\n            .replace(\"H1B work visas for\", \"\")\n            .replace(\"H1B work visas\", \"\");\n\n        return (\n            <span>\n                The best city{\" \"}\n                {jobFragment.length\n                    ? `for ${jobFragment} on an H1B`\n                    : \"for an H1B\"}{\" \"}\n                {this.yearFragment ? \"was\" : \"is\"} <b>{city}</b> with an average\n                salary ${this.format(mean - countyMedian)} above the local\n                household median. Median household income is a good proxy for\n                cost of living in an area.{\" \"}\n                <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Household_income\">[1]</a>\n                .\n            </span>\n        );\n    }\n\n    get format() {\n        return scaleLinear()\n            .domain(d3extent(this.props.data, d => d.base_salary))\n            .tickFormat();\n    }\n\n    render() {\n        const format = this.format,\n            mean = d3mean(this.props.data, d => d.base_salary),\n            deviation = d3deviation(this.props.data, d => d.base_salary);\n\n        return (\n            <p className=\"lead\">\n                {this.yearsFragment ? this.yearsFragment : \"Since 2012\"} the{\" \"}\n                {this.UStateFragment} tech industry{\" \"}\n                {this.yearsFragment ? \"sponsored\" : \"has sponsored\"}{\" \"}\n                <b>\n                    {format(this.props.data.length)} {this.jobTitleFragment}\n                </b>\n                {this.previousYearFragment}. Most of them paid{\" \"}\n                <b>\n                    ${format(mean - deviation)} to ${format(mean + deviation)}\n                </b>{\" \"}\n                per year. {this.countyFragment}\n            </p>\n        );\n    }\n}\n\nexport default Description;\n","import React from 'react'\nimport * as d3 from 'd3'\nconst MedianLine = ({\n  data,\n  value,\n  width,\n  height,\n  x,\n  y,\n  bottomMargin,\n  median\n}) => {\n  const yScale = d3\n        .scaleLinear()\n        .domain([0, d3.max(data, value)])\n        .range([height - y - bottomMargin, 0]),\n    line = d3.line()([[0, 5], [width, 5]]);\n\nconst medianValue = median || d3.median(data, value);\n\nconst translate = `translate(${x}, ${yScale(medianValue)})`,\n    medianLabel = `Median Household: $${yScale.tickFormat()(median)}`;\n\nreturn (\n    <g className=\"mean\" transform={translate}>\n        <text\n            x={width - 5}\n            y=\"0\"\n            textAnchor=\"end\"\n            style={{ background: \"purple\" }}\n        >\n            {medianLabel}\n        </text>\n        <path style={{paddingLeft:'40px'}} d={line} />\n    </g>\n);\n}\n\nexport default MedianLine\n","import React from \"react\";\n\n\nconst Toggle = ({ label, name, value, onClick }) => {\n  let className = \"btn btn-default\";\n  if (value) {\n      className += \" btn-primary\";\n  }\n\n\n  return (\n      <button className={className} onClick={() => onClick(name, !value)}> \n        {label}\n      </button>\n  );\n  };\n  export default Toggle;\n","import React from \"react\";\nimport Toggle from \"./Toggle\";\n\nclass ControlRow extends React.Component {\n    makePick = (picked, newState) => {\n        this.props.updateDataFilter(picked, !newState);\n    };\n\n    _addToggle(name) {\n        let key = `toggle-${name}`,\n            label = name;\n\n        if (this.props.capitalize) {\n            label = label.toUpperCase();\n        }\n\n        return (\n            <Toggle\n                label={label}\n                name={name}\n                key={key}\n                value={this.props.picked === name}\n                onClick={this.makePick}\n            />\n        );\n    }\n\n    render() {\n        const { toggleNames } = this.props;\n\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    {toggleNames.map(name => this._addToggle(name))}\n                </div>\n            </div>\n        );\n    }\n}\nexport default ControlRow;\n","import React from \"react\";\nimport ControlRow from \"./ControlRow\";\n\nclass Controls extends React.Component {\n    state = {\n        yearFilter: () => true,\n        jobTitleFilter: () => true,\n        USstateFilter: () => true,\n        year: \"*\",\n        jobTitle: \"*\",\n        USstate: \"*\"\n    };\n\n    componentDidMount() {\n        let [year, USstate, jobTitle] = window.location.hash\n            .replace(\"#\", \"\")\n            .split(\"-\");\n\n        if (year !== \"*\" && year) {\n            this.updateYearFilter(Number(year));\n        }\n\n        if (USstate !== \"*\" && USstate) {\n            this.updateUSstateFilter(USstate);\n        }\n\n        if (jobTitle !== \"*\" && jobTitle) {\n            this.updateJobTitleFilter(jobTitle);\n        }\n    }\n\n    updateYearFilter = (year, reset) => {\n\n        let filter = d => d.submit_date.getFullYear() === year;\n\n        if (reset || !year) {\n            filter = () => true;\n            year = \"*\";\n        }\n\n        this.setState(\n            {\n                yearFilter: filter,\n                year: year\n            },\n            () => this.reportUpdateUpTheChain()\n        );\n    };\n\n    updateJobTitleFilter = (title, reset) => {\n        let filter = d => d.clean_job_title === title;\n\n        if (reset || !title) {\n            filter = () => true;\n            title = \"*\";\n        }\n\n        this.setState(\n            {\n                jobTitleFilter: filter,\n                jobTitle: title\n            },\n            () => this.reportUpdateUpTheChain()\n        );\n    };\n\n    updateUSstateFilter = (USstate, reset) => {\n        let filter = d => d.USstate === USstate;\n\n        if (reset || !USstate) {\n            filter = () => true;\n            USstate = \"*\";\n        }\n\n        this.setState(\n            {\n                USstateFilter: filter,\n                USstate: USstate\n            },\n            () => this.reportUpdateUpTheChain()\n        );\n    };\n\n    reportUpdateUpTheChain() {\n      window.location.hash = [\n           this.state.year || \"*\",\n           this.state.USstate || \"*\",\n           this.state.jobTitle || \"*\"\n       ].join(\"-\");\n\n        this.props.updateDataFilter(\n            (filters => {\n                return d =>\n                    filters.yearFilter(d) &&\n                    filters.jobTitleFilter(d) &&\n                    filters.USstateFilter(d);\n                })(this.state),\n            {\n                year: this.state.year,\n                jobTitle: this.state.jobTitle,\n                USstate: this.state.USstate\n            }\n        );\n    }\n\n    render() {\n        const { data } = this.props;\n\n        const years = new Set(data.map(d => d.submit_date.getFullYear())),\n            jobTitles = new Set(data.map(d => d.clean_job_title)),\n            USstates = new Set(data.map(d => d.USstate));\n\n        return (\n            <div>\n                <ControlRow\n                    data={data}\n                    toggleNames={Array.from(years.values())}\n                    picked={this.state.year}\n                    updateDataFilter={this.updateYearFilter}\n                />\n                <ControlRow\n                    data={data}\n                    toggleNames={Array.from(jobTitles.values())}\n                    picked={this.state.jobTitle}\n                    updateDataFilter={this.updateJobTitleFilter}\n                />\n\n                <ControlRow\n                    data={data}\n                    toggleNames={Array.from(USstates.values())}\n                    picked={this.state.USstate}\n                    updateDataFilter={this.updateUSstateFilter}\n                    capitalize\n                />\n            </div>\n        );\n    }\n}\n\nexport default Controls;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\n\nimport Preloader from \"./components/Preloader\";\nimport { loadAllData } from \"./DataHandling\";\n\nimport CountyMap from \"./components/CountyMap\";\nimport './style.css'\nimport Histogram from './components/Histogram/Histogram'\nimport {Title, Description} from './components/Meta'\nimport MedianLine from './components/MedianLine'\nimport Controls from './components/Controls'\n\n\nclass App extends Component {\n    state = {\n        techSalaries: [],\n        salariesFilter: () => true,\n        medianIncomes: [],\n        countyNames: [],\n        filteredTechSalaries:[],\n        page:0,\n        filteredBy: {\n          USstate:'*',\n          year:'*',\n          jobTitle:'*'\n        }\n    };\n\n    componentDidMount() {\n        loadAllData(data => {\n          this.setState(data)\n        })\n    }\n    loopData(data) {\n      for (var i  in data) {\n        if (data[i][0][\"USstate\"] == \"AL\") {\n\n        }\n      }\n    }\n\n    componentDidUpdate(prevState) {\n      if (this.state.medianIncomesByUSState !== prevState.medianIncomesByUSState){\n\n      }\n    }\n\n    countyValue(county, techSalariesMap) {\n        const medianHousehold = this.state.medianIncomes[county.id],\n            salaries = techSalariesMap[county.name];\n\n        if (!medianHousehold || !salaries) {\n            return null;\n        }\n\n        const median = d3.median(salaries, d => d.base_salary);\n\n        return {\n            countyID: county.id,\n            value: median - medianHousehold.medianIncome\n        };\n    }\n\n    startData = e => {\n      let {page} = this.state\n      setInterval(() => this.setState({page:parseInt(this.state.page +1)}), 100);\n    }\n\n    updateDataFilter = (filter, filteredBy) => {\n        this.setState({\n            salariesFilter: filter,\n            filteredBy: filteredBy\n        });\n    }\n\n\n    render() {\n        const {\n            techSalaries,\n            countyNames,\n            usTopoJson,\n            USstateNames,\n            page,\n            filteredBy,\n            medianIncomesByUSState\n        } = this.state;\n        if (techSalaries.length < 1) {\n            return <Preloader />;\n        }\n\n        let zoom = null,\n            medianHousehold = this.state.medianIncomesByUSState[\"US\"][0]\n                .medianIncome;\n\n        if (filteredBy.USstate !== \"*\") {\n            zoom = this.state.filteredBy.USstate;\n            medianHousehold = d3.mean(\n                this.state.medianIncomesByUSState[zoom],\n                d => d.medianIncome\n            );\n        }\n\n        const filteredSalaries = techSalaries\n              .filter(this.state.salariesFilter),\n            filteredSalariesMap = _.groupBy(filteredSalaries, \"countyID\"),\n            countyValues = countyNames\n                .map(county => this.countyValue(county, filteredSalariesMap))\n                .filter(d => !_.isNull(d));\n\n        return (\n            <div className=\"App container\">\n              <Title data={filteredSalaries} filteredBy={filteredBy} />\n                <Description\n                    data={filteredSalaries}\n                    allData={techSalaries}\n                    filteredBy={filteredBy}\n                    medianIncomesByCounty={this.state.medianIncomesByCounty}\n                />\n                <svg width=\"1100\" height=\"500\">\n                    <CountyMap\n                        usTopoJson={usTopoJson}\n                        USstateNames={USstateNames}\n                        values={countyValues}\n                        x={0}\n                        y={0}\n                        width={500}\n                        height={500}\n                        zoom={zoom}\n                    />\n                  <rect x=\"500\" y=\"0\" width=\"500\" height=\"500\" style={{fill:'white'}} />\n                    <Histogram\n                      bins={10}\n                      width={500}\n                      height={500}\n                      x={500}\n                      y={10}\n                      data={filteredSalaries}\n                      axisMargin={82}\n                      bottomMargin={5}\n                      value={d => d.base_salary}\n                      />\n                      <MedianLine data={filteredSalaries}\n                        x={500}\n                        y={10}\n                        width={600}\n                        height={500}\n                        bottomMargin={5}\n                        median={medianHousehold}\n                        value={d => d.base_salary}\n                      />\n                </svg>\n                <Controls data={techSalaries} updateDataFilter={this.updateDataFilter} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/preloading.0e87f8f1.png\";"],"sourceRoot":""}